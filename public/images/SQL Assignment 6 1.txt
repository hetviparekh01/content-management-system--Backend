CREATE TABLE customers

CREATE TABLE orders

Create TABLE Products 

----Insert 20 records in it both the table are refereing each others.

Relations are : 

Orders Contains ProductId
Orders Contains CustomerId


1.Create a stored procedure called "get_customers" that returns all customers from the "customers" table.
2.Create a stored procedure called "get_orders" that returns all orders from the "orders" table.
3.Create a stored procedure called "get_order_details" that accepts an order ID as a parameter and returns the details of that order (i.e., the products and quantities).
4.Create a stored procedure called "get_customer_orders" that accepts a customer ID as a parameter and returns all orders for that customer.
5.Create a stored procedure called "get_order_total" that accepts an order ID as a parameter and returns the total amount of the order.
6.Create a stored procedure called "get_product_list" that returns a list of all products from the "products" table.
7.Create a stored procedure called "get_product_info" that accepts a product ID as a parameter and returns the details of that product.
8.Create a stored procedure called "get_customer_info" that accepts a customer ID as a parameter and returns the details of that customer.
9.Create a stored procedure called "update_customer_info" that accepts a customer ID and new information as parameters and updates the customer's information in the "customers" table.
10.Create a stored procedure called "delete_customer" that accepts a customer ID as a parameter and deletes that customer from the "customers" table.
11.Create a stored procedure called "get_order_count" that accepts a customer ID as a parameter and returns the number of orders for that customer.
12.Create a stored procedure called "get_customer_balance" that accepts a customer ID as a parameter and returns the customer's balance (i.e., the total amount of all orders minus the total amount of all payments).
13.Create a stored procedure called "get_customer_payments" that accepts a customer ID as a parameter and returns all payments made by that customer.
14.Create a stored procedure called "add_customer" that accepts a name and address as parameters and adds a new customer to the "customers" table.
15.Create a stored procedure called "get_top_products" that returns the top 10 products based on sales volume.
16.Create a stored procedure called "get_product_sales" that accepts a product ID as a parameter and returns the total sales volume for that product.
17.Create a stored procedure called "get_customer_orders_by_date" that accepts a customer ID and date range as parameters and returns all orders for that customer within the specified date range.
18.Create a stored procedure called "get_order_details_by_date" that accepts an order ID and date range as parameters and returns the details of that order within the specified date range.
19.Create a stored procedure called "get_product_sales_by_date" that accepts a product ID and date range as parameters and returns the total sales volume for that product within the specified date range.
20.Create a stored procedure called "get_customer_balance_by_date" that accepts a customer ID and date range as parameters and returns the customer's balance within the specified date range.
21.Create a stored procedure called "add_order" that accepts a customer ID, order date, and total amount as parameters and adds a new order to the "orders" table.
22.Create a stored procedure called "update_order_total" that accepts an order ID and a new total amount as parameters and updates the total amount of the order in the "orders" table.
23.Create a stored procedure called "delete_order" that accepts an order ID as a parameter and deletes that order from the "orders" table.



create atable name customer 
customer ID int,




insert into products values
1('Notebook', 10.00),
2('Pencils', 5.00),
3('eraser',5.50),
4('sharpner',5.50),
5('pen',7.00),
6('gel-pen',8.50),
7('textbooks',30.00),
8('supporter',50.00),
9('geometry-box',70.00),
10('ruler',15.00),
11('color book', 35.50),
12('drawing book', 30.00),
13('art book', 40.50),
14('crayons', 35.00),
15('water colors', 45.00),
16('pencil colors', 40.00),
17('Backpack', 250.00),
18('Water Bottle', 80.00),
19('gliters', 75.50),
20('whitener',20.50);







 insert into orders  values
(107, 510, '2024-03-14',2,30.00), 
(111, 519, '2024-03-18', 1,75.50),
(103, 506, '2020-03-13', 1,18.50), 
(106, 501, '2021-03-05', 5,50.00), 
(109, 505, '2024-03-14', 7,70.00),  
(116, 518, '2023-03-15', 1,80.00),
(101, 508, '2021-03-01', 3,150.00), 
(108, 501, '2024-03-30', 20,200.00), 
(119, 517, '2024-02-14', 2,500.00), 
(111, 509, '2024-01-25', 1,70.00),  
(102, 505, '2020-03-14', 15,105.00), 
(114, 511, '2024-08-31', 1,35.50), 
(120, 503, '2024-10-19', 1,5.50), 
(114, 507, '2024-03-14', 2,60.00),
(104, 513, '2024-04-11', 1,40.50),
(111, 511, '2024-12-16', 1,35.50),
(112, 505, '2024-05-15', 30,210.00),
(117, 514, '2024-03-09', 2,70.00), 
(113, 520, '2024-04-11', 1,20.50), 
(120, 515, '2024-07-25', 1,45.00); 



















